buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.rholder:gradle-one-jar:1.0.4'
        classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
    }
}

allprojects {
    apply plugin: 'jacoco'

    task buildInfo {
        def cmd = "git rev-parse HEAD"
        def proc = cmd.execute()
        ext.revision = proc.text.trim()
        ext.timestamp = String.valueOf(System.currentTimeMillis())
    }

    repositories {
        jcenter()
    }

    jacoco {
        toolVersion = '0.7.1.201405082137'
    }

    task eclipseSetup {
        description = "Cleans and generates eclipse project/classpath files that are not under version controlled."
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'findbugs'

    version = '0.3.2'

    eclipseSetup.dependsOn cleanEclipseProject
    eclipseSetup.dependsOn eclipseProject
    eclipseSetup.dependsOn cleanEclipseClasspath
    eclipseSetup.dependsOn eclipseClasspath

    buildscript {
        repositories {
            jcenter()
        }
        dependencies {
            classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
        }
    }

    dependencies {
        testCompile group: 'com.johnuckele', name: 'vtest', version: '0.9.3'
        testCompile group: 'junit', name: 'junit', version: '4.+'        
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories =  files(sourceSets.main.output)
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    repositories {
        jcenter()
        maven {
            url "https://github.com/juckele/juckele-mvn-repo/raw/master/releases"
        }
    }

    tasks.withType(FindBugs) {
        excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
        ignoreFailures = true
    }
}

project(':vivarium-core') {
    dependencies {
        compile 'com.google.guava:guava:18.0'
        compile 'com.google.guava:guava-gwt:18.0'
        compile 'com.googlecode.gwt-streamer:gwt-streamer:2.0.0'
    }
}

project(':vivarium-serialization') {
    dependencies {
        compile project(':vivarium-core')
        compile 'org.json:json:20140107'
    }
}

project(':vivarium-db') {
    dependencies {
        compile project(':vivarium-core')
        compile project(':vivarium-serialization')
        compile 'org.postgresql:postgresql:9.4-1201-jdbc41' 
    }
}
project(':vivarium-net') {
    dependencies {
        compile project(':vivarium-core')
        compile 'org.java-websocket:Java-WebSocket:1.3.0'
        compile 'com.fasterxml.jackson.core:jackson-core:2.6.3'
        compile 'com.fasterxml.jackson.core:jackson-databind:2.6.3'
    }
}
project(':vivarium-worker') {
    dependencies {
        compile project(':vivarium-net')
        compile project(':vivarium-scripts') 
    }
}
project(':vivarium-integration') {
    dependencies {
        compile project(':vivarium-server')
        compile project(':vivarium-worker')
    }
}
project(':vivarium-server') {
    dependencies {
        compile project(':vivarium-net')
        compile project(':vivarium-scripts') 
    }
}

project(':vivarium-ga') {
    dependencies {
        compile project(':vivarium-core')
        compile project(':vivarium-serialization')
        compile 'org.javatuples:javatuples:1.2'
    }
}

project(':vivarium-graph') {
    dependencies {
        compile project(':vivarium-core')
        compile 'jfree:jfreechart:1.0.9'
    }
}

project(':vivarium-scripts') {
    apply plugin: 'gradle-one-jar'

    ext.sharedManifest = manifest {
        attributes 'viviarium-version': version
        attributes 'git-revision': buildInfo.revision
        attributes 'build-timestamp': buildInfo.timestamp
    }

    task jarConvertFileFormat( type: OneJar ) {
        archiveName = 'convert-file-format'+'-'+version+'.jar'
        mainClass = 'io.vivarium.scripts.ConvertFileFormat'
        manifest = project.manifest {
            from sharedManifest
        }
    }
    task jarCreateAuditFunction( type: OneJar ) {
        archiveName = 'create-audit-function'+'-'+version+'.jar'
        mainClass = 'io.vivarium.scripts.CreateAuditFunction'
        manifest = project.manifest {
            from sharedManifest
        }
    }
    task jarCreateBlueprint( type: OneJar ) {
        archiveName = 'create-blueprint'+'-'+version+'.jar'
        mainClass = 'io.vivarium.scripts.CreateBlueprint'
        manifest = project.manifest {
            from sharedManifest
        }
    }
    task jarCreateSpecies( type: OneJar ) {
        archiveName = 'create-species'+'-'+version+'.jar'
        mainClass = 'io.vivarium.scripts.CreateSpecies'
        manifest = project.manifest {
            from sharedManifest
        }
    }
    task jarCreateWorld( type: OneJar ) {
        archiveName = 'create-world'+'-'+version+'.jar'
        mainClass = 'io.vivarium.scripts.CreateWorld'
        manifest = project.manifest {
            from sharedManifest
        }
    }
    task jarExtractCreatureFromWorld( type: OneJar ) {
        archiveName = 'extract-creature-from-world'+'-'+version+'.jar'
        mainClass = 'io.vivarium.scripts.ExtractCreatureFromWorld'
        manifest = project.manifest {
            from sharedManifest
        }
    }
    task jarNormalizeBrainGenomes( type: OneJar ) {
        archiveName = 'normalize-brain-genomes'+'-'+version+'.jar'
        mainClass = 'io.vivarium.scripts.NormalizeBrainGenomes'
        manifest = project.manifest {
            from sharedManifest
        }
    }
    task jarRunSimulation( type: OneJar ) {
        archiveName = 'run-simulation'+'-'+version+'.jar'
        mainClass = 'io.vivarium.scripts.RunSimulation'
        manifest = project.manifest {
            from sharedManifest
        }
    }
    task jarRunBenchmark( type: OneJar ) {
        archiveName = 'run-benchmark'+'-'+version+'.jar'
        mainClass = 'io.vivarium.scripts.RunBenchmark'
        manifest = project.manifest {
            from sharedManifest
        }
    }
    task jarUpdateSchema( type: OneJar ) {
        archiveName = 'update-schema'+'-'+version+'.jar'
        mainClass = 'io.vivarium.scripts.UpdateSchema'
        manifest = project.manifest {
            from sharedManifest
        }
    }

    task jarCollection {
        description = "Creates a complete set of stand-alone jars for scripts in this project."
    }
    jarCollection.dependsOn jarConvertFileFormat
    jarCollection.dependsOn jarCreateAuditFunction
    jarCollection.dependsOn jarCreateBlueprint
    jarCollection.dependsOn jarCreateSpecies
    jarCollection.dependsOn jarCreateWorld
    jarCollection.dependsOn jarExtractCreatureFromWorld
    jarCollection.dependsOn jarNormalizeBrainGenomes
    jarCollection.dependsOn jarRunSimulation
    jarCollection.dependsOn jarRunBenchmark
    jarCollection.dependsOn jarUpdateSchema
    build.dependsOn jarCollection

    dependencies {
        compile project(':vivarium-core')
        compile project(':vivarium-db')
        compile project(':vivarium-graph')
        compile project(':vivarium-serialization')
        compile 'com.fasterxml.jackson.core:jackson-core:2.6.3'
        compile 'com.fasterxml.jackson.core:jackson-databind:2.6.3'
        compile 'commons-cli:commons-cli:1.3.1'
    }
}

project(':vivarium-swing') {
    dependencies {
        compile project(':vivarium-core')
        compile project(':vivarium-scripts')
        compile 'net.java.dev.jna:jna-platform:4.0.0'
    }
}

project(':vivarium-web') {
    apply plugin: 'gwt'
    apply plugin: 'war'

    gwt {
        gwtVersion='2.7.0'

        modules 'io.vivarium.Web'

        src += files(project(':vivarium-core').sourceSets.main.allJava.srcDirs)
        src += files(project(':vivarium-net').sourceSets.main.allJava.srcDirs)
    }

    dependencies {
        compile project(':vivarium-core')
        compile project(':vivarium-net')
        compile 'com.google.guava:guava:18.0'
        compile 'com.google.guava:guava-gwt:18.0'
        compile 'com.googlecode.gwt-streamer:gwt-streamer:2.0.0'
        compile 'org.realityforge.gwt.websockets:gwt-websockets:1.1.2'
        compile 'com.github.nmorel.gwtjackson:gwt-jackson:0.10.0'
    }
}

task coverageReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}
