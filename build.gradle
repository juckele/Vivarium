buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.diffplug.gradle.spotless:spotless:1.3.3"
        classpath 'com.github.rholder:gradle-one-jar:1.0.4'
        classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
        classpath 'net.ltgt.gradle:gradle-apt-plugin:0.5'
    }
}


allprojects {
    apply plugin: 'jacoco'

    task buildInfo {
        def cmd = "git rev-parse HEAD"
        def proc = cmd.execute()
        ext.revision = proc.text.trim()
        ext.timestamp = String.valueOf(System.currentTimeMillis())
    }

    ext {
        gdxVersion = '1.9.2'
    }

    repositories {
        jcenter()
    }

    jacoco {
        toolVersion = '0.7.1.201405082137'
    }

    task eclipseSetup {
        description = "Cleans and generates eclipse project/classpath files that are not under version controlled."
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'findbugs'
    apply plugin: 'net.ltgt.apt'
    apply plugin: "com.diffplug.gradle.spotless"

    version = '0.3.2'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    eclipseSetup.dependsOn cleanEclipseProject
    eclipseSetup.dependsOn eclipseProject
    eclipseSetup.dependsOn cleanEclipseClasspath
    eclipseSetup.dependsOn eclipseClasspath
    eclipseSetup.dependsOn cleanEclipseFactorypath
    eclipseSetup.dependsOn eclipseFactorypath

    buildscript {
        repositories {
            jcenter()
        }
        dependencies {
            classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
        }
    }

    dependencies {
        testCompile "com.johnuckele:vtest:0.9.5"
        testCompile "junit:junit:4.+"
        testCompile "org.mockito:mockito-core:1.+"
    }

    task dbTest(type: Test) {
        useJUnit {
            includeCategories 'io.vivarium.test.DatabaseTest'
        }
    }
    task fastTest(type: Test) {
        useJUnit {
            includeCategories 'io.vivarium.test.FastTest'
        }
    }
    task slowTest(type: Test) {
        useJUnit {
            includeCategories 'io.vivarium.test.SlowTest'
        }
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories =  files(sourceSets.main.output)
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    spotless {
        java {
            eclipseFormatFile '../vivarium_code_format.xml'
        }
    }

    repositories {
        jcenter()
        maven {
            url "https://github.com/juckele/juckele-mvn-repo/raw/master/releases"
        }
    }

    tasks.withType(FindBugs) {
        excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
        ignoreFailures = true
    }
}

project(':vivarium-core') {
    if (!project.hasProperty("mainClass")) {
        ext.mainClass = ""
    }
    task execute(type:JavaExec) {
        if ( mainClass.equals("") ) {
            logger.error('Error: mainClass not set for execute task. Use -PmainClass="com.test" to set')
        }
        main = mainClass
        classpath = sourceSets.main.runtimeClasspath
    }

    dependencies {
        compile 'com.google.guava:guava:19.0'
        compile 'com.google.guava:guava-gwt:19.0'
        compile 'com.googlecode.gwt-streamer:gwt-streamer:2.0.0'
        apt 'org.projectlombok:lombok:1.16.6'
        compile 'org.projectlombok:lombok:1.16.6'
        testApt 'org.projectlombok:lombok:1.16.6'
        testCompile 'org.projectlombok:lombok:1.16.6'
    }
}

project(':vivarium-desktop') {
    dependencies {
        compile project(':vivarium-core')
        compile project(':vivarium-visualizer')
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    }
}

project(':vivarium-serialization') {
    dependencies {
        compile project(':vivarium-core')
        compile 'org.json:json:20140107'
    }
}

project(':vivarium-db') {
    apply plugin: 'groovy'

    dependencies {
        compile project(':vivarium-core')
        compile project(':vivarium-serialization')
        compile 'org.codehaus.groovy:groovy-all:2.4.5'
        compile 'org.postgresql:postgresql:9.4-1201-jdbc41' 
    }
}
project(':vivarium-net') {
    dependencies {
        compile project(':vivarium-core')
        compile 'org.java-websocket:Java-WebSocket:1.3.0'
        compile 'com.fasterxml.jackson.core:jackson-core:2.6.3'
        compile 'com.fasterxml.jackson.core:jackson-databind:2.6.3'
        apt 'org.projectlombok:lombok:1.16.6'
        compile 'org.projectlombok:lombok:1.16.6'
        testApt 'org.projectlombok:lombok:1.16.6'
        testCompile 'org.projectlombok:lombok:1.16.6'
    }
}
project(':vivarium-ws') {
    dependencies {
        compile project(':vivarium-db')
        compile project(':vivarium-net')
        compile 'net.java.dev.jna:jna-platform:4.0.0'
        compile 'org.apache.commons:commons-collections4:4.1'
        compile 'org.jppf:jppf-node:5.1.1'
    }
}

project(':vivarium-ga') {
    dependencies {
        compile project(':vivarium-core')
        compile project(':vivarium-serialization')
        compile 'org.javatuples:javatuples:1.2'
    }
}

project(':vivarium-graph') {
    dependencies {
        compile project(':vivarium-core')
        compile project(':vivarium-serialization')
        compile 'jfree:jfreechart:1.0.9'
    }
}

project(':vivarium-scripts') {
    apply plugin: 'gradle-one-jar'

    ext.sharedManifest = manifest {
        attributes 'viviarium-version': version
        attributes 'git-revision': buildInfo.revision
        attributes 'build-timestamp': buildInfo.timestamp
    }

    task jarNormalizationConvergenceLocal( type: OneJar ) {
        archiveName = 'normalization-convergence-local'+'-'+version+'.jar'
        mainClass = 'io.vivarium.experiment.NormalizationConvergenceLocal'
        manifest = project.manifest {
            from sharedManifest
        }
    }
    task jarMutationRateLocal( type: OneJar ) {
        archiveName = 'mutation-rate-local'+'-'+version+'.jar'
        mainClass = 'io.vivarium.experiment.MutationRateLocal'
        manifest = project.manifest {
            from sharedManifest
        }
    }
    task jarConvertFileFormat( type: OneJar ) {
        archiveName = 'convert-file-format'+'-'+version+'.jar'
        mainClass = 'io.vivarium.scripts.ConvertFileFormat'
        manifest = project.manifest {
            from sharedManifest
        }
    }
    task jarCreateAuditBlueprint( type: OneJar ) {
        archiveName = 'create-audit-blueprint'+'-'+version+'.jar'
        mainClass = 'io.vivarium.scripts.CreateAuditBlueprint'
        manifest = project.manifest {
            from sharedManifest
        }
    }
    task jarCreateCreatureBlueprint( type: OneJar ) {
        archiveName = 'create-creature-blueprint'+'-'+version+'.jar'
        mainClass = 'io.vivarium.scripts.CreateCreatureBlueprint'
        manifest = project.manifest {
            from sharedManifest
        }
    }
    task jarCreateWorldBlueprint( type: OneJar ) {
        archiveName = 'create-world-blueprint'+'-'+version+'.jar'
        mainClass = 'io.vivarium.scripts.CreateWorldBlueprint'
        manifest = project.manifest {
            from sharedManifest
        }
    }
    task jarCreateWorld( type: OneJar ) {
        archiveName = 'create-world'+'-'+version+'.jar'
        mainClass = 'io.vivarium.scripts.CreateWorld'
        manifest = project.manifest {
            from sharedManifest
        }
    }
    task jarExtractCreatureFromWorld( type: OneJar ) {
        archiveName = 'extract-creature-from-world'+'-'+version+'.jar'
        mainClass = 'io.vivarium.scripts.ExtractCreatureFromWorld'
        manifest = project.manifest {
            from sharedManifest
        }
    }
    task jarGraphGenerationalActionGraph( type: OneJar ) {
        archiveName = 'graph-generational-action-graph'+'-'+version+'.jar'
        mainClass = 'io.vivarium.scripts.GraphGenerationalActionGraph'
        manifest = project.manifest {
            from sharedManifest
        }
    }
    task jarMeasureProcessorGenomeLengths( type: OneJar ) {
        archiveName = 'measure-processor-genome-lengths'+'-'+version+'.jar'
        mainClass = 'io.vivarium.scripts.MeasureProcessorGenomeLengths'
        manifest = project.manifest {
            from sharedManifest
        }
    }
    task jarNormalizeProcessorGenomes( type: OneJar ) {
        archiveName = 'normalize-processor-genomes'+'-'+version+'.jar'
        mainClass = 'io.vivarium.scripts.NormalizeProcessorGenomes'
        manifest = project.manifest {
            from sharedManifest
        }
    }
    task jarRunSimulation( type: OneJar ) {
        archiveName = 'run-simulation'+'-'+version+'.jar'
        mainClass = 'io.vivarium.scripts.RunSimulation'
        manifest = project.manifest {
            from sharedManifest
        }
    }
    task jarRunBenchmark( type: OneJar ) {
        archiveName = 'run-benchmark'+'-'+version+'.jar'
        mainClass = 'io.vivarium.scripts.RunBenchmark'
        manifest = project.manifest {
            from sharedManifest
        }
    }
    task jarUpdateSchema( type: OneJar ) {
        archiveName = 'update-schema'+'-'+version+'.jar'
        mainClass = 'io.vivarium.scripts.UpdateSchema'
        manifest = project.manifest {
            from sharedManifest
        }
    }

    task jarCollection {
        description = "Creates a complete set of stand-alone jars for scripts in this project."
    }
    jarCollection.dependsOn jarNormalizationConvergenceLocal
    jarCollection.dependsOn jarMutationRateLocal
    jarCollection.dependsOn jarConvertFileFormat
    jarCollection.dependsOn jarCreateAuditBlueprint
    jarCollection.dependsOn jarCreateCreatureBlueprint
    jarCollection.dependsOn jarCreateWorldBlueprint
    jarCollection.dependsOn jarCreateWorld
    jarCollection.dependsOn jarExtractCreatureFromWorld
    jarCollection.dependsOn jarGraphGenerationalActionGraph
    jarCollection.dependsOn jarMeasureProcessorGenomeLengths
    jarCollection.dependsOn jarNormalizeProcessorGenomes
    jarCollection.dependsOn jarRunSimulation
    jarCollection.dependsOn jarRunBenchmark
    jarCollection.dependsOn jarUpdateSchema
    build.dependsOn jarCollection

    dependencies {
        compile project(':vivarium-core')
        compile project(':vivarium-db')
        compile project(':vivarium-graph')
        compile project(':vivarium-serialization')
        compile project(':vivarium-ws')
        compile 'com.fasterxml.jackson.core:jackson-core:2.6.3'
        compile 'com.fasterxml.jackson.core:jackson-databind:2.6.3'
        compile 'commons-cli:commons-cli:1.3.1'
    }
}

project(':vivarium-visualizer') {
    dependencies {
        compile project(':vivarium-core')
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
    }
}

project(':vivarium-visualization') {
    dependencies {
        compile project(':vivarium-core')
    }
}

project(':vivarium-swing') {
    dependencies {
        compile project(':vivarium-core')
        compile project(':vivarium-visualization')
        compile project(':vivarium-scripts')
        compile 'net.java.dev.jna:jna-platform:4.0.0'
    }
}

project(':vivarium-html') {
    apply plugin: 'gwt'
    apply plugin: 'war'

    gwt {
        gwtVersion='2.7.0'
        maxHeapSize="1G"
        minHeapSize="1G"

        modules 'io.vivarium.GdxDefinition'

        src += files(project(':vivarium-core').sourceSets.main.allJava.srcDirs)
        src += files(project(':vivarium-visualizer').sourceSets.main.allJava.srcDirs)
        src += files(project(':vivarium-net').sourceSets.main.allJava.srcDirs)
    }

    dependencies {
        compile project(':vivarium-core')
        compile project(':vivarium-net')
        compile project(':vivarium-visualizer')
        compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"
        compile 'com.github.nmorel.gwtjackson:gwt-jackson:0.10.0'
        compile 'com.google.guava:guava:19.0'
        compile 'com.google.guava:guava-gwt:19.0'
        compile 'com.google.gwt:gwt-user:2.7.0'
        compile 'com.googlecode.gwt-streamer:gwt-streamer:2.0.0'
        compile 'org.realityforge.gwt.websockets:gwt-websockets:1.1.2'
    }
}
project(':vivarium-web') {
    apply plugin: 'gwt'
    apply plugin: 'war'

    gwt {
        gwtVersion='2.7.0'

        modules 'io.vivarium.Web'
        modules 'io.vivarium.WebVis'

        src += files(project(':vivarium-core').sourceSets.main.allJava.srcDirs)
        src += files(project(':vivarium-visualization').sourceSets.main.allJava.srcDirs)
        src += files(project(':vivarium-net').sourceSets.main.allJava.srcDirs)
    }

    dependencies {
        compile project(':vivarium-core')
        compile project(':vivarium-net')
        compile project(':vivarium-visualization')
        compile 'com.github.nmorel.gwtjackson:gwt-jackson:0.10.0'
        compile 'com.google.guava:guava:19.0'
        compile 'com.google.guava:guava-gwt:19.0'
        compile 'com.google.gwt:gwt-user:2.7.0'
        compile 'com.googlecode.gwt-streamer:gwt-streamer:2.0.0'
        compile 'org.realityforge.gwt.websockets:gwt-websockets:1.1.2'
    }
}

task coverageReport(type: JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}
